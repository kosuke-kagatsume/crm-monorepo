// DRM Suite - Prisma Schema
// Multi-tenant CRM with RAG support

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// ==================== Multi-tenant Base ====================
model Company {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  plan      String   @default("standard") // standard, premium, enterprise
  settings  String     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users             User[]
  stores            Store[]
  customers         Customer[]
  estimates         Estimate[]
  inventories       Inventory[]
  bookings          Booking[]
  campaigns         Campaign[]
  ragDocuments      RagDocument[]
  auditLogs         AuditLog[]
  expenseCategories ExpenseCategory[]
  expenses          Expense[]
  budgets           Budget[]
  paymentMethods    PaymentMethod[]

  @@index([code])
  @@map("companies")
}

model Store {
  id        String   @id @default(cuid())
  companyId String
  name      String
  code      String
  address   String?
  location  String?    // PostGIS point {lat, lng}
  settings  String     @default("{}")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  company     Company      @relation(fields: [companyId], references: [id])
  users       User[]
  customers   Customer[]
  estimates   Estimate[]
  inventories Inventory[]
  bookings    Booking[]
  expenses    Expense[]
  campaigns   Campaign[]

  @@unique([companyId, code])
  @@index([companyId])
  @@map("stores")
}

// ==================== Auth & Users ====================
model User {
  id           String   @id @default(cuid())
  companyId    String
  storeId      String?
  email        String   @unique
  name         String
  role         String   // OpenFGA role ID
  permissions  String     @default("[]")
  passwordHash String?
  isActive     Boolean  @default(true)
  lastLoginAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  company          Company           @relation(fields: [companyId], references: [id])
  store            Store?            @relation(fields: [storeId], references: [id])
  estimates        Estimate[]
  bookings         Booking[]
  campaigns        Campaign[]
  auditLogs        AuditLog[]
  ragQueryLogs     RagQueryLog[]
  expenses         Expense[]         @relation("ExpenseSubmitter")
  approvedExpenses Expense[]         @relation("ExpenseApprover")
  expenseApprovals ExpenseApproval[]

  @@index([companyId])
  @@index([email])
  @@map("users")
}

// ==================== Customer Management ====================
model Customer {
  id          String   @id @default(cuid())
  companyId   String
  storeId     String?
  customerNumber String // auto-generated customer number
  name        String
  companyName String?
  email       String
  phone       String?
  address     String?
  postalCode  String?
  location    String?    // address + coordinates
  status      String   // lead, prospect, customer, inactive
  priority    Int      @default(0) // 1-5
  tags        String     @default("[]")
  
  // Business info
  industry    String?
  employees   Int?
  revenue     Float?
  
  // Interaction tracking
  firstContact    DateTime?
  lastContact     DateTime?
  nextActionDate  DateTime?
  nextAction      String?
  assignee        String?  // user ID
  
  // CRM data
  leadSource      String?  // website, referral, campaign, etc
  lifeTimeValue   Float  @default(0)
  acquisitionCost Float  @default(0)
  
  // Communication preferences
  preferredContact String? // email, phone, sms, line
  communicationHistory String @default("[]")
  
  // Metadata
  metadata    String     @default("{}")
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String

  // Relations
  company     Company           @relation(fields: [companyId], references: [id])
  store       Store?            @relation(fields: [storeId], references: [id])
  interactions CustomerInteraction[]
  estimates   CustomerEstimate[]

  @@unique([companyId, customerNumber])
  @@index([companyId])
  @@index([email])
  @@index([status])
  @@index([assignee])
  @@map("customers")
}

model CustomerInteraction {
  id          String   @id @default(cuid())
  customerId  String
  type        String   // call, email, meeting, chat, line, note, visit
  direction   String   // inbound, outbound
  subject     String?
  content     String   
  outcome     String?  // interested, not_interested, follow_up_scheduled, etc
  nextAction  String?
  scheduledAt DateTime?
  completedAt DateTime?
  createdBy   String
  metadata    String     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@index([type])
  @@index([createdAt])
  @@map("customer_interactions")
}

model CustomerEstimate {
  id           String   @id @default(cuid())
  customerId   String
  estimateId   String
  status       String   // draft, sent, viewed, accepted, rejected
  sentAt       DateTime?
  viewedAt     DateTime?
  respondedAt  DateTime?
  response     String?  // customer response/feedback
  metadata     String     @default("{}")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@index([estimateId])
  @@map("customer_estimates")
}

// ==================== Estimate Service ====================
model Estimate {
  id              String   @id @default(cuid())
  companyId       String
  storeId         String?
  userId          String
  estimateNumber  String
  version         Int      @default(1)
  status          String   // draft, pending, approved, rejected, expired
  customerName    String
  customerEmail   String?
  customerPhone   String?
  propertyType    String?  // house, apartment, commercial
  constructMethod String?  // new, reform, renovation
  structure       String?  // wood, steel, rc
  location        String?    // address + coordinates
  totalAmount     Float 
  taxAmount       Float 
  discountAmount  Float  @default(0)
  profitMargin    Float?
  validUntil      DateTime
  notes           String?
  approvalFlow    String?    // workflow definition
  metadata        String     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  company       Company        @relation(fields: [companyId], references: [id])
  store         Store?         @relation(fields: [storeId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  items         EstimateItem[]
  costs         Cost[]
  contractors   Contractor[]
  approvals     Approval[]

  @@unique([companyId, estimateNumber, version])
  @@index([companyId])
  @@index([status])
  @@index([customerEmail])
  @@map("estimates")
}

model EstimateItem {
  id          String   @id @default(cuid())
  estimateId  String
  itemCode    String
  name        String
  description String?
  category    String
  quantity    Float 
  unit        String
  unitPrice   Float 
  totalPrice  Float 
  costPrice   Float?
  metadata    String     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  estimate Estimate @relation(fields: [estimateId], references: [id], onDelete: Cascade)

  @@index([estimateId])
  @@map("estimate_items")
}

model Cost {
  id         String   @id @default(cuid())
  estimateId String
  category   String   // material, labor, equipment, subcontract
  name       String
  amount     Float 
  supplier   String?
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  estimate Estimate @relation(fields: [estimateId], references: [id], onDelete: Cascade)

  @@index([estimateId])
  @@map("costs")
}

model Contractor {
  id         String   @id @default(cuid())
  estimateId String
  name       String
  type       String   // subcontractor, supplier
  scope      String
  amount     Float 
  status     String   // pending, confirmed, completed
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  estimate Estimate @relation(fields: [estimateId], references: [id], onDelete: Cascade)

  @@index([estimateId])
  @@map("contractors")
}

model Approval {
  id         String   @id @default(cuid())
  estimateId String
  stage      Int
  approverEmail String
  status     String   // pending, approved, rejected
  comments   String?
  approvedAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  estimate Estimate @relation(fields: [estimateId], references: [id], onDelete: Cascade)

  @@index([estimateId])
  @@map("approvals")
}

// ==================== Inventory Service ====================
model Inventory {
  id           String   @id @default(cuid())
  companyId    String
  storeId      String
  sku          String
  name         String
  description  String?
  category     String
  attributes   String     @default("{}")  // flexible attributes
  currentStock Float 
  minStock     Float 
  maxStock     Float 
  unit         String
  location     String?  // warehouse location
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  company       Company         @relation(fields: [companyId], references: [id])
  store         Store           @relation(fields: [storeId], references: [id])
  lots          InventoryLot[]
  movements     StockMovement[]
  counts        StockCount[]

  @@unique([companyId, sku])
  @@index([companyId])
  @@index([storeId])
  @@map("inventories")
}

model InventoryLot {
  id          String   @id @default(cuid())
  inventoryId String
  lotNumber   String
  quantity    Float 
  expiryDate  DateTime?
  metadata    String     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  inventory Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@index([inventoryId])
  @@map("inventory_lots")
}

model StockMovement {
  id          String   @id @default(cuid())
  inventoryId String
  type        String   // in, out, adjust
  quantity    Float 
  reason      String
  reference   String?  // order number, etc
  metadata    String     @default("{}")
  createdAt   DateTime @default(now())

  // Relations
  inventory Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@index([inventoryId])
  @@index([type])
  @@map("stock_movements")
}

model StockCount {
  id           String   @id @default(cuid())
  inventoryId  String
  sessionId    String
  countedQty   Float 
  systemQty    Float 
  variance     Float 
  status       String   // pending, approved, rejected
  countedBy    String
  countedAt    DateTime
  createdAt    DateTime @default(now())

  // Relations
  inventory Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@index([inventoryId])
  @@index([sessionId])
  @@map("stock_counts")
}

// ==================== Booking Service ====================
model Resource {
  id        String   @id @default(cuid())
  type      String   // MEETING_ROOM, CAR
  name      String
  capacity  Int?
  location  String?
  metadata  String     @default("{}")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings Booking[]

  @@index([type])
  @@map("resources")
}

model Booking {
  id         String   @id @default(cuid())
  companyId  String
  storeId    String?
  userId     String
  resourceId String
  title      String
  startTime  DateTime
  endTime    DateTime
  status     String   // confirmed, cancelled, completed
  priority   Int      @default(0) // CRM priority
  notes      String?
  metadata   String     @default("{}")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  company  Company   @relation(fields: [companyId], references: [id])
  store    Store?    @relation(fields: [storeId], references: [id])
  user     User      @relation(fields: [userId], references: [id])
  resource Resource  @relation(fields: [resourceId], references: [id])

  @@index([companyId])
  @@index([resourceId])
  @@index([startTime, endTime])
  @@map("bookings")
}

// ==================== Marketing Service ====================
model Campaign {
  id             String   @id @default(cuid())
  companyId      String
  storeId        String?
  userId         String
  name           String
  type           String   // email, social, event, etc
  status         String   // draft, active, paused, completed
  budgetPlanned  Float 
  budgetActual   Float  @default(0)
  startDate      DateTime
  endDate        DateTime
  targetAudience String     @default("{}")
  channels       String     @default("[]")
  metrics        String     @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  company Company @relation(fields: [companyId], references: [id])
  store   Store?  @relation(fields: [storeId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
  leads   Lead[]

  @@index([companyId])
  @@index([status])
  @@map("campaigns")
}

model Lead {
  id           String   @id @default(cuid())
  campaignId   String
  stage        String   // LEAD, VISIT, CONTRACT
  name         String
  email        String?
  phone        String?
  source       String
  score        Int      @default(0)
  assignedTo   String?
  convertedAt  DateTime?
  metadata     String     @default("{}")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@index([stage])
  @@map("leads")
}

// ==================== RAG System ====================
model RagDocument {
  id         String   @id @default(cuid())
  companyId  String
  storeId    String?
  projectId  String?
  docType    String   // estimate_pdf, cost_pdf, contract_pdf, inventory_csv, manual_md
  fileName   String
  fileUrl    String
  fileSize   Int
  status     String   // pending, processing, completed, failed
  metadata   String     @default("{}")
  processedAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  company    Company       @relation(fields: [companyId], references: [id])
  embeddings RagEmbedding[]

  @@index([companyId])
  @@index([docType])
  @@map("rag_documents")
}

model RagEmbedding {
  id           String   @id @default(cuid())
  documentId   String
  chunkIndex   Int
  chunkText    String
  embedding    String  // JSON array for SQLite
  metadata     String     @default("{}")
  createdAt    DateTime @default(now())

  // Relations
  document RagDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@map("rag_embeddings")
}

model RagQueryLog {
  id            String   @id @default(cuid())
  userId        String
  query         String   
  answer        String   
  retrievedDocs String     @default("[]")
  confidence    Float?
  feedback      String?  // positive, negative, neutral
  responseTime  Int      // milliseconds
  createdAt     DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
  @@map("rag_query_logs")
}

// ==================== Expense Management ====================
model ExpenseCategory {
  id        String   @id @default(cuid())
  companyId String
  name      String
  code      String
  parentId  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  company   Company           @relation(fields: [companyId], references: [id])
  parent    ExpenseCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children  ExpenseCategory[] @relation("CategoryHierarchy")
  expenses  Expense[]
  budgets   Budget[]

  @@unique([companyId, code])
  @@index([companyId])
  @@map("expense_categories")
}

model Expense {
  id          String   @id @default(cuid())
  companyId   String
  storeId     String?
  userId      String
  categoryId  String
  title       String
  description String?
  amount      Float 
  currency    String   @default("JPY")
  expenseDate DateTime
  status      String   // draft, submitted, approved, rejected, paid
  approvedBy  String?
  approvedAt  DateTime?
  paidAt      DateTime?
  projectId   String?
  vendorId    String?
  receiptUrl  String?
  metadata    String     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company         Company              @relation(fields: [companyId], references: [id])
  store           Store?               @relation(fields: [storeId], references: [id])
  user            User                 @relation("ExpenseSubmitter", fields: [userId], references: [id])
  approver        User?                @relation("ExpenseApprover", fields: [approvedBy], references: [id])
  category        ExpenseCategory      @relation(fields: [categoryId], references: [id])
  approvalHistory ExpenseApproval[]
  attachments     ExpenseAttachment[]

  @@index([companyId])
  @@index([userId])
  @@index([categoryId])
  @@index([status])
  @@index([expenseDate])
  @@map("expenses")
}

model ExpenseApproval {
  id         String   @id @default(cuid())
  expenseId  String
  userId     String
  action     String   // approve, reject, request_info
  comment    String?
  createdAt  DateTime @default(now())

  // Relations
  expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@index([expenseId])
  @@map("expense_approvals")
}

model ExpenseAttachment {
  id         String   @id @default(cuid())
  expenseId  String
  fileName   String
  fileUrl    String
  fileSize   Int
  fileType   String
  uploadedAt DateTime @default(now())

  // Relations
  expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@index([expenseId])
  @@map("expense_attachments")
}

model Budget {
  id         String   @id @default(cuid())
  companyId  String
  categoryId String
  fiscal     String   // 2024Q1, 2024M01, 2024
  amount     Float 
  currency   String   @default("JPY")
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  company  Company         @relation(fields: [companyId], references: [id])
  category ExpenseCategory @relation(fields: [categoryId], references: [id])

  @@unique([companyId, categoryId, fiscal])
  @@index([companyId])
  @@index([categoryId])
  @@map("budgets")
}

model PaymentMethod {
  id        String   @id @default(cuid())
  companyId String
  name      String
  type      String   // credit_card, bank_transfer, cash, etc
  details   String     @default("{}")
  isDefault Boolean  @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  company Company @relation(fields: [companyId], references: [id])

  @@index([companyId])
  @@map("payment_methods")
}

// ==================== System ====================
model AuditLog {
  id        String   @id @default(cuid())
  companyId String
  userId    String
  action    String
  entity    String
  entityId  String
  oldValue  String?
  newValue  String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  company Company @relation(fields: [companyId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@index([companyId])
  @@index([userId])
  @@index([entity, entityId])
  @@index([createdAt])
  @@map("audit_logs")
}